//
// JiraWorkflow.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details of a workflow. */

public struct JiraWorkflow {

    /** The description of the workflow. */
    public var _description: String?
    /** The ID of the workflow. */
    public var _id: String?
    /** Indicates if the workflow can be edited. */
    public var isEditable: Bool?
    /** The name of the workflow. */
    public var name: String?
    public var scope: WorkflowScope?
    public var startPointLayout: WorkflowLayout?
    /** The statuses referenced in this workflow. */
    public var statuses: [WorkflowReferenceStatus]?
    /** If there is a current [asynchronous task](#async-operations) operation for this workflow. */
    public var taskId: String?
    /** The transitions of the workflow. Note that a transition can have either the deprecated &#x60;to&#x60;/&#x60;from&#x60; fields or the &#x60;toStatusReference&#x60;/&#x60;links&#x60; fields, but never both nor a combination. */
    public var transitions: [WorkflowTransitions]?
    /** Use the optional &#x60;workflows.usages&#x60; expand to get additional information about the projects and issue types associated with the requested workflows. */
    public var usages: [ProjectIssueTypes]?
    public var version: DocumentVersion?

    public init(_description: String? = nil, _id: String? = nil, isEditable: Bool? = nil, name: String? = nil, scope: WorkflowScope? = nil, startPointLayout: WorkflowLayout? = nil, statuses: [WorkflowReferenceStatus]? = nil, taskId: String? = nil, transitions: [WorkflowTransitions]? = nil, usages: [ProjectIssueTypes]? = nil, version: DocumentVersion? = nil) {
        self._description = _description
        self._id = _id
        self.isEditable = isEditable
        self.name = name
        self.scope = scope
        self.startPointLayout = startPointLayout
        self.statuses = statuses
        self.taskId = taskId
        self.transitions = transitions
        self.usages = usages
        self.version = version
    }

    public enum CodingKeys: String, CodingKey { 
        case _description = "description"
        case _id = "id"
        case isEditable
        case name
        case scope
        case startPointLayout
        case statuses
        case taskId
        case transitions
        case usages
        case version
    }

}
