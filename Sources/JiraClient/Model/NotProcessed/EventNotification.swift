//
// EventNotification.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details about a notification associated with an event. */

public struct EventNotification {

    public enum NotificationType: String, Codable { 
        case currentAssignee = "CurrentAssignee"
        case reporter = "Reporter"
        case currentUser = "CurrentUser"
        case projectLead = "ProjectLead"
        case componentLead = "ComponentLead"
        case user = "User"
        case group = "Group"
        case projectRole = "ProjectRole"
        case emailAddress = "EmailAddress"
        case allWatchers = "AllWatchers"
        case userCustomField = "UserCustomField"
        case groupCustomField = "GroupCustomField"
    }
    /** The email address. */
    public var emailAddress: String?
    /** Expand options that include additional event notification details in the response. */
    public var expand: String?
    /** The custom user or group field. */
    public var field: AllOfEventNotificationField?
    /** The specified group. */
    public var group: AllOfEventNotificationGroup?
    /** The ID of the notification. */
    public var _id: Int64?
    /** Identifies the recipients of the notification. */
    public var notificationType: NotificationType?
    /** As a group&#x27;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#x27;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field. */
    public var parameter: String?
    /** The specified project role. */
    public var projectRole: AllOfEventNotificationProjectRole?
    /** The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#x27;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field. */
    public var recipient: String?
    /** The specified user. */
    public var user: AllOfEventNotificationUser?

    public init(emailAddress: String? = nil, expand: String? = nil, field: AllOfEventNotificationField? = nil, group: AllOfEventNotificationGroup? = nil, _id: Int64? = nil, notificationType: NotificationType? = nil, parameter: String? = nil, projectRole: AllOfEventNotificationProjectRole? = nil, recipient: String? = nil, user: AllOfEventNotificationUser? = nil) {
        self.emailAddress = emailAddress
        self.expand = expand
        self.field = field
        self.group = group
        self._id = _id
        self.notificationType = notificationType
        self.parameter = parameter
        self.projectRole = projectRole
        self.recipient = recipient
        self.user = user
    }

    public enum CodingKeys: String, CodingKey { 
        case emailAddress
        case expand
        case field
        case group
        case _id = "id"
        case notificationType
        case parameter
        case projectRole
        case recipient
        case user
    }

}
