//
// User.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** A user with details as permitted by the user&#x27;s Atlassian Account privacy settings. However, be aware of these exceptions:   *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, &#x60;displayName&#x60; provides an indication and other parameters have default values or are blank (for example, email is blank).  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, &#x60;accountId&#x60; returns *unknown* and all other parameters have fallback values.  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values. */

public struct User {

    /** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests. */
    public var accountId: String?
    /** The user account type. Can take the following values:   *  &#x60;atlassian&#x60; regular Atlassian user account  *  &#x60;app&#x60; system account used for Connect applications and OAuth to represent external systems  *  &#x60;customer&#x60; Jira Service Desk account representing an external service desk */
    public var accountType: AccountType?
    /** Whether the user is active. */
    public var active: Bool?
    /** The application roles the user is assigned to. */
    public var applicationRoles: UserApplicationRoles?
    /** The avatars of the user. */
    public var avatarUrls: UserAvatarUrls?
    /** The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. */
    public var displayName: String?
    /** The email address of the user. Depending on the user’s privacy setting, this may be returned as null. */
    public var emailAddress: String?
    /** Expand options that include additional user details in the response. */
    public var expand: String?
    /** The groups that the user belongs to. */
    public var groups: UserGroups?
    /** This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
    public var key: String?
    /** The locale of the user. Depending on the user’s privacy setting, this may be returned as null. */
    public var locale: String?
    /** This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
    public var name: String?
    /** The URL of the user. */
    public var _self: String?
    /** The time zone specified in the user&#x27;s profile. Depending on the user’s privacy setting, this may be returned as null. */
    public var timeZone: String?

    public init(accountId: String? = nil, accountType: AccountType? = nil, active: Bool? = nil, applicationRoles: UserApplicationRoles? = nil, avatarUrls: UserAvatarUrls? = nil, displayName: String? = nil, emailAddress: String? = nil, expand: String? = nil, groups: UserGroups? = nil, key: String? = nil, locale: String? = nil, name: String? = nil, _self: String? = nil, timeZone: String? = nil) {
        self.accountId = accountId
        self.accountType = accountType
        self.active = active
        self.applicationRoles = applicationRoles
        self.avatarUrls = avatarUrls
        self.displayName = displayName
        self.emailAddress = emailAddress
        self.expand = expand
        self.groups = groups
        self.key = key
        self.locale = locale
        self.name = name
        self._self = _self
        self.timeZone = timeZone
    }
    
    internal init(client: Components.Schemas.User?) {
        self.accountId = client?.accountId
        self.accountType = AccountType(type: client?.accountType)
        self.active = client?.active
        self.applicationRoles = UserApplicationRoles(client: client?.applicationRoles?.value1)
        self.avatarUrls = UserAvatarUrls(client: client?.avatarUrls?.value1)
        self.displayName = client?.displayName
        self.emailAddress = client?.emailAddress
        self.expand = client?.expand
        self.groups = UserGroups(client: client?.groups?.value1)
        self.key = client?.key
        self.locale = client?.locale
        self.name = client?.name
        self._self = client?._self
        self.timeZone = client?.timeZone
    }
    
    internal init(client: Components.Schemas.UserDetails?) {
        self.accountId = client?.accountId
        self.accountType = AccountType(type: client?.accountType)
        self.active = client?.active
        self.avatarUrls = UserAvatarUrls(client: client?.avatarUrls?.value1)
        self.displayName = client?.displayName
        self.emailAddress = client?.emailAddress
        self.key = client?.key
        self.name = client?.name
        self._self = client?._self
        self.timeZone = client?.timeZone
    }
}
