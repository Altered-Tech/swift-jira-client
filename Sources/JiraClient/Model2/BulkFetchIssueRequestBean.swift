//
// BulkFetchIssueRequestBean.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct BulkFetchIssueRequestBean: Codable {

    /** Use [expand](em&gt;#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where &#x60;expand&#x60; is specified, &#x60;expand&#x60; is defined as a list of values. The expand options are:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent. */
    public var expand: [String]?
    /** A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  The default is &#x60;*navigable&#x60;.  Examples:   *  &#x60;summary,comment&#x60; Returns the summary and comments fields only.  *  &#x60;-description&#x60; Returns all navigable (default) fields except description.  *  &#x60;*all,-comment&#x60; Returns all fields except comments.  Multiple &#x60;fields&#x60; parameters can be included in a request.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields. */
    public var fields: [String]?
    /** Reference fields by their key (rather than ID). The default is &#x60;false&#x60;. */
    public var fieldsByKeys: Bool?
    /** An array of issue IDs or issue keys to fetch. You can mix issue IDs and keys in the same query. */
    public var issueIdsOrKeys: [String]
    /** A list of issue property keys of issue properties to be included in the results. A maximum of 5 issue property keys can be specified. */
    public var properties: [String]?

    public init(expand: [String]? = nil, fields: [String]? = nil, fieldsByKeys: Bool? = nil, issueIdsOrKeys: [String], properties: [String]? = nil) {
        self.expand = expand
        self.fields = fields
        self.fieldsByKeys = fieldsByKeys
        self.issueIdsOrKeys = issueIdsOrKeys
        self.properties = properties
    }


}
