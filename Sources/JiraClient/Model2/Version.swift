//
// Version.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details about a project version. */

public struct Version: Codable {

    /** If the expand option &#x60;approvers&#x60; is used, returns a list containing the approvers for this version. */
    public var approvers: [VersionApprover]?
    /** Indicates that the version is archived. Optional when creating or updating a version. */
    public var archived: Bool?
    /** The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes. */
    public var _description: String?
    /** If the expand option &#x60;driver&#x60; is used, returns the Atlassian account ID of the driver. */
    public var driver: String?
    /** Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  *  &#x60;driver&#x60; Returns the Atlassian account ID of the version driver.  *  &#x60;approvers&#x60; Returns a list containing approvers for this version.  Optional for create and update. */
    public var expand: String?
    /** The ID of the version. */
    public var _id: String?
    /** If the expand option &#x60;issuesstatus&#x60; is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. */
    public var issuesStatusForFixVersion: AllOfVersionIssuesStatusForFixVersion?
    /** The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version. */
    public var moveUnfixedIssuesTo: String?
    /** The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. */
    public var name: String?
    /** If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version. */
    public var operations: [SimpleLink]?
    /** Indicates that the version is overdue. */
    public var overdue: Bool?
    /** Deprecated. Use &#x60;projectId&#x60;. */
    public var project: String?
    /** The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version. */
    public var projectId: Int64?
    /** The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. */
    public var releaseDate: Date?
    /** Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. */
    public var released: Bool?
    /** The URL of the version. */
    public var _self: String?
    /** The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version. */
    public var startDate: Date?
    /** The date on which work on this version is expected to finish, expressed in the instance&#x27;s *Day/Month/Year Format* date format. */
    public var userReleaseDate: String?
    /** The date on which work on this version is expected to start, expressed in the instance&#x27;s *Day/Month/Year Format* date format. */
    public var userStartDate: String?

    public init(approvers: [VersionApprover]? = nil, archived: Bool? = nil, _description: String? = nil, driver: String? = nil, expand: String? = nil, _id: String? = nil, issuesStatusForFixVersion: AllOfVersionIssuesStatusForFixVersion? = nil, moveUnfixedIssuesTo: String? = nil, name: String? = nil, operations: [SimpleLink]? = nil, overdue: Bool? = nil, project: String? = nil, projectId: Int64? = nil, releaseDate: Date? = nil, released: Bool? = nil, _self: String? = nil, startDate: Date? = nil, userReleaseDate: String? = nil, userStartDate: String? = nil) {
        self.approvers = approvers
        self.archived = archived
        self._description = _description
        self.driver = driver
        self.expand = expand
        self._id = _id
        self.issuesStatusForFixVersion = issuesStatusForFixVersion
        self.moveUnfixedIssuesTo = moveUnfixedIssuesTo
        self.name = name
        self.operations = operations
        self.overdue = overdue
        self.project = project
        self.projectId = projectId
        self.releaseDate = releaseDate
        self.released = released
        self._self = _self
        self.startDate = startDate
        self.userReleaseDate = userReleaseDate
        self.userStartDate = userStartDate
    }

    public enum CodingKeys: String, CodingKey { 
        case approvers
        case archived
        case _description = "description"
        case driver
        case expand
        case _id = "id"
        case issuesStatusForFixVersion
        case moveUnfixedIssuesTo
        case name
        case operations
        case overdue
        case project
        case projectId
        case releaseDate
        case released
        case _self = "self"
        case startDate
        case userReleaseDate
        case userStartDate
    }

}
