//
// Webhook.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** A webhook. */

public struct Webhook: Codable {

    public enum Events: String, Codable { 
        case jiraIssueCreated = "jira:issue_created"
        case jiraIssueUpdated = "jira:issue_updated"
        case jiraIssueDeleted = "jira:issue_deleted"
        case commentCreated = "comment_created"
        case commentUpdated = "comment_updated"
        case commentDeleted = "comment_deleted"
        case issuePropertySet = "issue_property_set"
        case issuePropertyDeleted = "issue_property_deleted"
    }
    /** The Jira events that trigger the webhook. */
    public var events: [Events]
    /** The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date. */
    public var expirationDate: Int64?
    /** A list of field IDs. When the issue changelog contains any of the fields, the webhook &#x60;jira:issue_updated&#x60; is sent. If this parameter is not present, the app is notified about all field updates. */
    public var fieldIdsFilter: [String]?
    /** The ID of the webhook. */
    public var _id: Int64
    /** A list of issue property keys. A change of those issue properties triggers the &#x60;issue_property_set&#x60; or &#x60;issue_property_deleted&#x60; webhooks. If this parameter is not present, the app is notified about all issue property updates. */
    public var issuePropertyKeysFilter: [String]?
    /** The JQL filter that specifies which issues the webhook is sent for. */
    public var jqlFilter: String

    public init(events: [Events], expirationDate: Int64? = nil, fieldIdsFilter: [String]? = nil, _id: Int64, issuePropertyKeysFilter: [String]? = nil, jqlFilter: String) {
        self.events = events
        self.expirationDate = expirationDate
        self.fieldIdsFilter = fieldIdsFilter
        self._id = _id
        self.issuePropertyKeysFilter = issuePropertyKeysFilter
        self.jqlFilter = jqlFilter
    }

    public enum CodingKeys: String, CodingKey { 
        case events
        case expirationDate
        case fieldIdsFilter
        case _id = "id"
        case issuePropertyKeysFilter
        case jqlFilter
    }

}
