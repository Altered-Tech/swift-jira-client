//
// JqlFunctionPrecomputationBean.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Jql function precomputation. */

public struct JqlFunctionPrecomputationBean: Codable {

    /** The list of arguments function was invoked with. */
    public var arguments: [String]?
    /** The timestamp of the precomputation creation. */
    public var created: Date?
    /** The error message to be displayed to the user. */
    public var error: String?
    /** The field the function was executed against. */
    public var field: String?
    /** The function key. */
    public var functionKey: String?
    /** The name of the function. */
    public var functionName: String?
    /** The id of the precomputation. */
    public var _id: String?
    /** The operator in context of which function was executed. */
    public var _operator: String?
    /** The timestamp of the precomputation last update. */
    public var updated: Date?
    /** The timestamp of the precomputation last usage. */
    public var used: Date?
    /** The JQL fragment stored as the precomputation. */
    public var value: String?

    public init(arguments: [String]? = nil, created: Date? = nil, error: String? = nil, field: String? = nil, functionKey: String? = nil, functionName: String? = nil, _id: String? = nil, _operator: String? = nil, updated: Date? = nil, used: Date? = nil, value: String? = nil) {
        self.arguments = arguments
        self.created = created
        self.error = error
        self.field = field
        self.functionKey = functionKey
        self.functionName = functionName
        self._id = _id
        self._operator = _operator
        self.updated = updated
        self.used = used
        self.value = value
    }

    public enum CodingKeys: String, CodingKey { 
        case arguments
        case created
        case error
        case field
        case functionKey
        case functionName
        case _id = "id"
        case _operator = "operator"
        case updated
        case used
        case value
    }

}
