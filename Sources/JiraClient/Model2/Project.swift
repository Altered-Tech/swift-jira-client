//
// Project.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details about a project. */

public struct Project: Codable {

    public enum AssigneeType: String, Codable { 
        case projectLead = "PROJECT_LEAD"
        case unassigned = "UNASSIGNED"
    }
    public enum ProjectTypeKey: String, Codable { 
        case software = "software"
        case serviceDesk = "service_desk"
        case business = "business"
    }
    public enum Style: String, Codable { 
        case classic = "classic"
        case nextGen = "next-gen"
    }
    /** Whether the project is archived. */
    public var archived: Bool?
    /** The user who archived the project. */
    public var archivedBy: AllOfProjectArchivedBy?
    /** The date when the project was archived. */
    public var archivedDate: Date?
    /** The default assignee when creating issues for this project. */
    public var assigneeType: AssigneeType?
    /** The URLs of the project&#x27;s avatars. */
    public var avatarUrls: AllOfProjectAvatarUrls?
    /** List of the components contained in the project. */
    public var components: [ProjectComponent]?
    /** Whether the project is marked as deleted. */
    public var deleted: Bool?
    /** The user who marked the project as deleted. */
    public var deletedBy: AllOfProjectDeletedBy?
    /** The date when the project was marked as deleted. */
    public var deletedDate: Date?
    /** A brief description of the project. */
    public var _description: String?
    /** An email address associated with the project. */
    public var email: String?
    /** Expand options that include additional project details in the response. */
    public var expand: String?
    /** Whether the project is selected as a favorite. */
    public var favourite: Bool?
    /** The ID of the project. */
    public var _id: String?
    /** Insights about the project. */
    public var insight: AllOfProjectInsight?
    /** Whether the project is private from the user&#x27;s perspective. This means the user can&#x27;t see the project or any associated issues. */
    public var isPrivate: Bool?
    /** The issue type hierarchy for the project. */
    public var issueTypeHierarchy: AllOfProjectIssueTypeHierarchy?
    /** List of the issue types available in the project. */
    public var issueTypes: [IssueTypeDetails]?
    /** The key of the project. */
    public var key: String?
    /** The project landing page info. */
    public var landingPageInfo: AllOfProjectLandingPageInfo?
    /** The username of the project lead. */
    public var lead: AllOfProjectLead?
    /** The name of the project. */
    public var name: String?
    /** User permissions on the project */
    public var permissions: AllOfProjectPermissions?
    /** The category the project belongs to. */
    public var projectCategory: AllOfProjectProjectCategory?
    /** The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project. */
    public var projectTypeKey: ProjectTypeKey?
    /** Map of project properties */
    public var properties: [String:Any]?
    /** The date when the project is deleted permanently. */
    public var retentionTillDate: Date?
    /** The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post). */
    public var roles: [String:String]?
    /** The URL of the project details. */
    public var _self: String?
    /** Whether the project is simplified. */
    public var simplified: Bool?
    /** The type of the project. */
    public var style: Style?
    /** A link to information about this project, such as project documentation. */
    public var url: String?
    /** Unique ID for next-gen projects. */
    public var uuid: UUID?
    /** The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post). */
    public var versions: [Version]?

    public init(archived: Bool? = nil, archivedBy: AllOfProjectArchivedBy? = nil, archivedDate: Date? = nil, assigneeType: AssigneeType? = nil, avatarUrls: AllOfProjectAvatarUrls? = nil, components: [ProjectComponent]? = nil, deleted: Bool? = nil, deletedBy: AllOfProjectDeletedBy? = nil, deletedDate: Date? = nil, _description: String? = nil, email: String? = nil, expand: String? = nil, favourite: Bool? = nil, _id: String? = nil, insight: AllOfProjectInsight? = nil, isPrivate: Bool? = nil, issueTypeHierarchy: AllOfProjectIssueTypeHierarchy? = nil, issueTypes: [IssueTypeDetails]? = nil, key: String? = nil, landingPageInfo: AllOfProjectLandingPageInfo? = nil, lead: AllOfProjectLead? = nil, name: String? = nil, permissions: AllOfProjectPermissions? = nil, projectCategory: AllOfProjectProjectCategory? = nil, projectTypeKey: ProjectTypeKey? = nil, properties: [String:Any]? = nil, retentionTillDate: Date? = nil, roles: [String:String]? = nil, _self: String? = nil, simplified: Bool? = nil, style: Style? = nil, url: String? = nil, uuid: UUID? = nil, versions: [Version]? = nil) {
        self.archived = archived
        self.archivedBy = archivedBy
        self.archivedDate = archivedDate
        self.assigneeType = assigneeType
        self.avatarUrls = avatarUrls
        self.components = components
        self.deleted = deleted
        self.deletedBy = deletedBy
        self.deletedDate = deletedDate
        self._description = _description
        self.email = email
        self.expand = expand
        self.favourite = favourite
        self._id = _id
        self.insight = insight
        self.isPrivate = isPrivate
        self.issueTypeHierarchy = issueTypeHierarchy
        self.issueTypes = issueTypes
        self.key = key
        self.landingPageInfo = landingPageInfo
        self.lead = lead
        self.name = name
        self.permissions = permissions
        self.projectCategory = projectCategory
        self.projectTypeKey = projectTypeKey
        self.properties = properties
        self.retentionTillDate = retentionTillDate
        self.roles = roles
        self._self = _self
        self.simplified = simplified
        self.style = style
        self.url = url
        self.uuid = uuid
        self.versions = versions
    }

    public enum CodingKeys: String, CodingKey { 
        case archived
        case archivedBy
        case archivedDate
        case assigneeType
        case avatarUrls
        case components
        case deleted
        case deletedBy
        case deletedDate
        case _description = "description"
        case email
        case expand
        case favourite
        case _id = "id"
        case insight
        case isPrivate
        case issueTypeHierarchy
        case issueTypes
        case key
        case landingPageInfo
        case lead
        case name
        case permissions
        case projectCategory
        case projectTypeKey
        case properties
        case retentionTillDate
        case roles
        case _self = "self"
        case simplified
        case style
        case url
        case uuid
        case versions
    }

}
