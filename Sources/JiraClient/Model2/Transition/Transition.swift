//
// Transition.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** Details of a workflow transition. */

public struct Transition{

    public enum ModelType: String {
        case global = "global"
        case initial = "initial"
        case directed = "directed"
        
        init?(type: Components.Schemas.Transition._typePayload) {
            switch type {
                case .directed: self = .directed
                case .global: self = .global
                case .initial: self = .initial
            }
        }
    }
    /** The description of the transition. */
    public let description: String
    /** The statuses the transition can start from. */
    public let from: [String]
    /** The ID of the transition. */
    public let id: String
    /** The name of the transition. */
    public let name: String
    /** The properties of the transition. */
    public let properties: [String:Any]?
    public let rules: WorkflowRules?
    public let screen: TransitionScreenDetails?
    /** The status the transition goes to. */
    public let to: String
    /** The type of the transition. */
    public let type: ModelType

    public init(description: String, from: [String], id: String, name: String, properties: [String:Any]? = nil, rules: WorkflowRules? = nil, screen: TransitionScreenDetails? = nil, to: String, type: ModelType) {
        self.description = description
        self.from = from
        self.id = id
        self.name = name
        self.properties = properties
        self.rules = rules
        self.screen = screen
        self.to = to
        self.type = type
    }
    
    internal init(client: Components.Schemas.Transition) {
        self.description = client.description
        self.from = client.from
        self.id = client.id
        self.name = client.name
        self.properties = client.properties?.additionalProperties
        self.rules = WorkflowRules(client: client.rules)
        self.screen = TransitionScreenDetails(client: client.screen)
        self.to = client.to
        self.type = ModelType(type: client._type)!
    }

}
